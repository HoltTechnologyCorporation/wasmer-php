window.searchMetadata = [{"id":"0","name":"Wasm\\Instance","description":"\nThe `Instance` class allows to compile WebAssembly bytes into a module, and\ninstantiate the module directly. Then, it is possible to call exported\nfunctions with a user-friendly API.\n\nTo get a ready to use WebAssembly program, one first needs to compile the\nbytes into a module, and second to instantiate the module. This class\nallows to combine these two steps: The constructor compiles and\ninstantiates the module in a single-pass.\n\n# Examples\n\n```php,ignore\n$instance = new Wasm\\Instance('my_program.wasm');\n$result = $instance->sum(1, 2);\n```\n\nThat simple.\n","url":".\/wasm\/Instance.html"},{"id":"1","name":"Wasm\\InvocationException","description":"\nAn `InvocationException` exception is thrown when a function is invoked on\na Wasm instance, and failed.\n","url":".\/wasm\/InvocationException.html"},{"id":"2","name":"Wasm\\Int16Array","description":"\nRepresents a typed array of twos-complement 16-bit signed integers in\nlittle-endian.\n","url":".\/wasm\/Int16Array.html"},{"id":"3","name":"Wasm\\Cache\\Filesystem","description":"\nAn on-disk cache implementation.\n\n# Examples\n\n```php,ignore\nconst KEY = 'foobar';\nconst CACHE_DIRECTORY = '\/tmp\/php.wasm.cache\/';\n\n$cache = new Wasm\\Cache\\Filesystem(CACHE_DIRECTORY);\n\n\/\/ The cache exists. Let's fetch the module.\nif ($cache->has(KEY)) {\n    $module = $cache->get(KEY);\n}\n\/\/ The cache doesn't exist. Let's compile and store the module.\nelse {\n    $module = new Wasm\\Module('my_program.wasm');\n    $cache->set(KEY, $module);\n}\n\n\/\/ Let's continue as usual: Instantiate the module, and invoke functions on it.\n$instance = $module->instantiate();\n$instance->sum(1, 2);\n```\n","url":".\/wasm\/cache\/Filesystem.html"},{"id":"4","name":"Wasm\\Cache\\CacheInterface","description":"\nA cache interface that forces to implement\n[PSR-16](https:\/\/www.php-fig.org\/psr\/psr-16\/).\n","url":".\/wasm\/cache\/CacheInterface.html"},{"id":"5","name":"Wasm\\Cache\\InvalidArgumentException","description":"\nRepresents an invalid argument error for the cache implementations.\n","url":".\/wasm\/cache\/InvalidArgumentException.html"},{"id":"6","name":"Wasm\\Cache\\Exception","description":"\nRepresents all errors for the cache implementations.\n","url":".\/wasm\/cache\/Exception.html"},{"id":"7","name":"Wasm\\Uint8Array","description":"\nRepresents a typed array of twos-complement 8-bit unsigned integers.\n","url":".\/wasm\/Uint8Array.html"},{"id":"8","name":"Wasm\\TypedArray","description":"\nRepresents all the `WasmTypedArray` classes.\n\n`WasmTypedArray` is a generic name to represents all `WasmInt*Array` and\n`WasmUint*Array` classes. This interface provides a type to represent them.\n","url":".\/wasm\/TypedArray.html"},{"id":"9","name":"Wasm\\Int32Array","description":"\nRepresents a typed array of twos-complement 32-bit signed integers in\nlittle-endian.\n","url":".\/wasm\/Int32Array.html"},{"id":"10","name":"Wasm\\Uint16Array","description":"\nRepresents a typed array of twos-complement 16-bit unsigned integers in\nlittle-endian.\n","url":".\/wasm\/Uint16Array.html"},{"id":"11","name":"Wasm\\Int8Array","description":"\nRepresents a typed array of twos-complement 8-bit signed integers.\n","url":".\/wasm\/Int8Array.html"},{"id":"12","name":"Wasm\\Module","description":"\nThe `Module` class allows to compile WebAssembly bytes into a WebAssembly\nmodule.\n\nTo get a ready to use WebAssembly program, one first needs to compile the\nbytes into a module, and second to instantiate the module. This class\naddresses the first step. To instantiate the module, call the `instantiate`\nmethod.\n\n# Examples\n\nTo compile the bytes in `my_program.wasm` to a WebAssembly module:\n\n```php,ignore\n$module = new Wasm\\Module('my_program.wasm');\n$instance = $module->instantiate();\n$result = $instance->sum(1, 2);\n```\n\nTo compile the module only once per multiple PHP requests, one will write:\n\n```php,ignore\n$module = new Wasm\\Module('my_program.wasm', Wasm\\Module::PERSISTENT);\n$instance = $module->instantiate();\n$result = $instance->sum(1, 2);\n```\n","url":".\/wasm\/Module.html"},{"id":"13","name":"Wasm\\Uint32Array","description":"\nRepresents a typed array of twos-complement 32-bit unsigned integers in\nlittle-endian.\n","url":".\/wasm\/Uint32Array.html"}];